plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.gx.app.gappxutils"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 3
        versionName "3.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName
            def date = new Date()
            def formattedDate = date.format('yyyy.MM.dd_HH.mm.ss')
            if (variant.buildType.name.equals('release')) {
                fileName = "Utils-Gappx_${variant.versionName}_${variant.mergedFlavor.versionCode}_${formattedDate}.apk"
            } else if (variant.buildType.name.equals('debug')) {
                fileName = "Utils-Gappx_${variant.versionName}_${variant.mergedFlavor.versionCode}_${formattedDate}.apk"
            } else {
                fileName = "Utils-Gappx.apk"
            }
            outputFileName = fileName
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
//    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    def kotlinx_coroutines_core = "1.5.2"
    def kotlinx_coroutines_android = "1.5.2"

    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:' + kotlinx_coroutines_core
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:' + kotlinx_coroutines_android
    def lifecycle_version = "2.3.1"
    // ViewModel
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Saved state module for ViewModel
    api "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // Jetpack Compose Integration for ViewModel
//    api "androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha04"
    // Annotation processor
//    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
//    api "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - helpers for implementing LifecycleOwner in a Service
    api "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    api "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    api "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    api 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    implementation 'com.google.code.gson:gson:' + buider.gson_code

    implementation 'com.github.bumptech.glide:glide:4.11.0'



    implementation  'com.scwang.smart:refresh-layout-kernel:2.0.3'      //核心必须依赖
    implementation  'com.scwang.smart:refresh-header-classics:2.0.3'    //经典刷新头
    implementation  'com.scwang.smart:refresh-header-material:2.0.3'    //谷歌刷新头
    implementation  'com.scwang.smart:refresh-footer-classics:2.0.3'    //经典加载
}